# 1. Total sum of all numbers divisible by 3 or 5
# We need to make a counter, use % for 5 or 3, and sum all the numbers in another variable as it counts

# total_sum = 0
# for i in range(0, 1001):
#     if i % 3 == 0 or i % 5 == 0:
#         total_sum += i

# print total_sum

# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

fib_seq = [1, 2]
sum = 0
running_total = 2
for i in fib_seq:
    if i < 4000000:
        sum = fib_seq[-2] + fib_seq[-1]
        fib_seq.append(sum)
        if sum % 2 == 0:
            running_total += sum
            print running_total

print fib_seq

## Connor's nicer solution:
# a = 1
# b = 1
# sum = 0
# while a <= 4000000:
#     if a % 2 == 0:
#         sum += a
#     a, b = b, a+b
# print sum

# Dumb factors

# factor_list = []
# num = int(raw_input("Enter a number: "))

# for i in xrange(1, (num + 1)): # if you don't want to check numbers larger than half the number (num/2 + 1)
#     if num % i == 0:
#         factor_list.append(i)

# print factor_list

# Rob's 'sieve'
# known_primes = [2,3]
# def is_prime(n):
#     total_known_primes = len(known_primes)
#     for i in range(0, total_known_primes):
#         if(n % known_primes[i] == 0):   #i is moving through the range of t_n_p, starting 0, and index 0 in k_p is 2
#             return False
#         else:
#             continue
#     known_primes.append(n)
#     if i == total_known_primes:
#         return True
    
# print is_prime(50)