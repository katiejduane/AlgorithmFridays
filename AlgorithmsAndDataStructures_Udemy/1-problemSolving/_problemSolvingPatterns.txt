How do you get better at solving problems?

1. Devise a plan for solving problems
2. Master common problem solving patterns --> not a panacea, but indeed helpful!

Examples: Frequency counter, multiple pointers, sliding window, divide and conquer, dynamic programming,
greedy algorithms, backtracking, and more...

- FREQUENCY COUNTERS: this pattern uses objects or sets to collect values/frequences of values. This can 
often avoid the need for nested loops or O(N^2) operations with arrays/strings.

- MULTIPLE POINTERS: Creating pointers or values that correspond to an index or position an move toward
the beginning, end, or middle based on a cartain condition. VERY efficient for solving problems with
minimal space complexity as well.

- SLIDING WINDOW: This pattern involved creating a windo which can either be an array or number from one 
position to another. Depending on a certain condition, the window either increases or closes (and a new 
window is created). Very useful for keeping track of a subset of data in an array/string, etc.

- DIVIDE & CONQUER: This pattern involves dividing a data set into smaller chunks and then repeating a 
process with a subset of data. This pattern can tremendously decrease time complexity!